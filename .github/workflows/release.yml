name: release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+" # Trigger on semantic version tags (e.g., v1.0.0)
      - "v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+" # Trigger on beta tags (e.g., v1.0.0-beta.1)
  workflow_dispatch:
    inputs:
      tag:
        description: "Git tag to create release for (e.g., v1.0.0 or v1.0.0-beta.1)"
        required: true
        type: string
      prerelease:
        description: "Is this a pre-release?"
        required: false
        default: false
        type: boolean
      generate_notes:
        description: "Automatically generate release notes?"
        required: false
        default: true
        type: boolean

env:
  IMAGE_NAME: barecms
  RELEASE_VERSION: ${{ github.event.inputs.tag || github.ref_name }}

jobs:
  build-binaries:
    name: build and package binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.4" # Ensure this matches your project's Go version

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18" # Ensure this matches your project's Node.js version

      - name: Install UI dependencies and build
        run: |
          cd ui
          npm install
          npm run build
          cd .. # Go back to root directory

      - name: Build and Package Linux AMD64
        run: |
          mkdir -p barecms-linux-amd64
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o barecms-linux-amd64/barecms ./cmd/main.go
          cp -r ui/dist barecms-linux-amd64/
          tar -czf barecms-linux-amd64.tar.gz barecms-linux-amd64

      - name: Build and Package Windows AMD64
        run: |
          mkdir -p barecms-windows-amd64
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o barecms-windows-amd64/barecms.exe ./cmd/main.go
          cp -r ui/dist barecms-windows-amd64/
          zip -r barecms-windows-amd64.zip barecms-windows-amd64

      - name: Build and Package macOS AMD64
        run: |
          mkdir -p barecms-macos-amd64
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o barecms-macos-amd64/barecms ./cmd/main.go
          cp -r ui/dist barecms-macos-amd64/
          tar -czf barecms-macos-amd64.tar.gz barecms-macos-amd64

      - name: Upload packaged binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: barecms-binaries
          path: |
            barecms-linux-amd64.tar.gz
            barecms-windows-amd64.zip
            barecms-macos-amd64.tar.gz

  build-and-push-docker:
    name: build and push docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}} # e.g., v1.0.0
            type=semver,pattern={{major}}.{{minor}} # e.g., v1.0
            type=raw,value=latest,enable=${{ github.ref == format('refs/tags/{0}', env.RELEASE_VERSION) && !contains(env.RELEASE_VERSION, '-beta') }} # Only tag 'latest' for non-beta releases

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: |
            linux/amd64
            linux/arm64

  create-github-release:
    name: create github release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-and-push-docker]
    permissions:
      contents: write
    steps:
      - name: Download all packaged binaries
        uses: actions/download-artifact@v4
        with:
          name: barecms-binaries
          path: ./release_artifacts # Download to this directory

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          # Use the generate_release_notes input from workflow_dispatch if available, otherwise default to true
          generateReleaseNotes: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.generate_notes || github.event_name == 'push' }}
          # Use the prerelease input from workflow_dispatch if available, otherwise infer from tag name
          prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease || contains(env.RELEASE_VERSION, '-beta') }}
          # Upload all packaged binaries as release assets
          artifacts: "./release_artifacts/*"
